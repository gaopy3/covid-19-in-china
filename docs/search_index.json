[["index.html", "Covid-19-China Chapter 1 Introduction", " Covid-19-China Qixiao He, Wenzhou Ma, Panyu Gao 2021-04-12 Chapter 1 Introduction We would like to choose this topic of COVID-19 in China because this is a pandemic which changes our life entirely and China is the homeland for all the three members in our group. As international students, we are the group of people who are most sensitive to the changing situation of the world and we want to look back upon what we have experienced and hope we can gather a piece using data visualization on how we human are able to get our lives back on track and what our homeland country China has achieved when facing such hazard. Coronavirus disease 2019 (COVID-19) is a contagious disease caused by severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2). The first case was identified in Wuhan, China, in December 2019. The disease has since spread worldwide, leading to an ongoing pandemic. (From Wikipedia) Since the COVID-19 outbroke in Wuhan from Hubei province in China, the pandemic situation in China was extremely unpleasant back in early 2020. However, with the strong policy of Chinese Government and the faith in it people, China was able to withhold the pressure and the people in China have went back to normal life. In this visualization report, we want to address three major problems: How does the pandemic spread in China? Does it follow a pattern (eg. Geometric) or not? What is the real situation of this pandemic in each province of China? What can we find when we look at those provinces individually? How does the epidemic in China relate to the major events (eg. Public policy) occurred during the same period? Compared it with what’s happening in the US. "],["data-sources.html", "Chapter 2 Data sources", " Chapter 2 Data sources The data of the COVID-19 in China was obtained using scratching methods in Python from the National Health Commission of China (http://www.nhc.gov.cn/xcs/yqtb/list_gzbd.shtml) and from Baidu Baike(https://baike.baidu.com/item/2020%E5%B9%B4%E4%B8%AD%E5%9B%BD%E6%96%B0%E5%86%A0%E8%82%BA%E7%82%8E%E7%96%AB%E6%83%85%E5%8F%91%E5%B1%95%E5%AE%9E%E5%BD%95/50157160?fr=aladdin). The data itself is collected by the officials in China with authority. The data in China contains the pandemic information within 34 provinces including Hongkong, Taiwan and Macao. In each province, we have variables in the number of cumulative confirmed cases, death cases and cured cases. And the nature of this data is a time series with a duration slightly over a month from 1/22/2020 to 2/29/2020. Next we have data with overall views in both China and the US. The data itself is collected by WHO (https://www.who.int/) and we obtained it on GitHub (https://github.com/CSSEGISandData/COVID-19). The data with overall views contains the information overall in China and US with variables in cumulative confirmed cases, death cases and daily increases in confirmed cases across a time period of over 400 days starting 1/22/2020. Some minor issues in the data from Chinese government because it is scratched from the web. We are managed to fix it manually since we cannot find a way to fix it with codes. "],["data-transformation.html", "Chapter 3 Data transformation", " Chapter 3 Data transformation The detailed code would be represented in Python with links in this section. Basically for the first two questions we are addressing, we use mainly the dataset from what we have scratched from web and we gathered them into one dataset. For the final question, we managed to find a moving average on each variable with a 7-day window because it can provide us with both a direct and smooth look on the graph. code link: https://github.com/ainiyo123/data-transformation.git First, loading the COVID-19 data of each province into the environment. The data of each province is stored in different csv files. Therefore, we use lapply to load all data at once. Since the date in each file has different format, we need to uniform format. After that, store all data in a dataframe. setwd(&quot;~/Columbia_DS/EDAV/final_project/covid data&quot;) file_name &lt;- list.files(pattern=&quot;*.csv&quot;) covid_data &lt;- lapply(file_name, function(x) read.csv(x, header = TRUE, row.names = 1)) for (i in 1:34) { if (grepl(pattern = &quot;月&quot;,x = covid_data[[i]][1,1])){ covid_data[[i]]$Date &lt;- as.Date(paste0(&#39;2020年&#39;, covid_data[[i]]$Date), &quot;%Y年%m月%d日&quot;) }else{ covid_data[[i]]$Date &lt;- as.Date(paste0(&#39;2020/&#39;, covid_data[[i]]$Date), &quot;%Y/%m/%d&quot;) } } setwd(&quot;~/Columbia_DS/EDAV/final_project&quot;) province_csvfile &lt;- read.csv(&#39;province_csvfile.csv&#39;, header = FALSE) date_range &lt;- seq.Date(from = as.Date(&quot;2020/01/19&quot;,format = &quot;%Y/%m/%d&quot;), by = &quot;day&quot;, length.out = 42) covid_data_province &lt;- data.frame(date = date_range) for (i in 1:34) { name_idx &lt;- which(province_csvfile$V2==file_name[i]) confirmed &lt;- rep(0, 42) date_province &lt;- covid_data[[i]]$Date province_csvfile$V1[name_idx] for (j in 1:42){ idx &lt;- which(date_province==date_range[j]) if (length(idx)!=0){ confirmed[j] = covid_data[[i]]$Confirmed.cases[idx] }else if(length(idx)==0 &amp;&amp; j!=1){ confirmed[j] = confirmed[j-1] } } covid_data_province &lt;- transform(covid_data_province, new_col = confirmed) covid_data_province &lt;- plyr::rename(covid_data_province, c(new_col=province_csvfile$V1[name_idx])) } province_order &lt;- names(covid_data_province)[order(covid_data_province[42, 2:35], decreasing = T)+1] head(covid_data_province[1:8]) ## date Anhui Macau Beijing Chongqing Guangdong Gansu Guangxi ## 1 2020-01-19 0 0 0 0 0 0 0 ## 2 2020-01-20 0 0 5 0 1 0 0 ## 3 2020-01-21 0 0 10 5 3 0 0 ## 4 2020-01-22 1 1 10 9 32 0 2 ## 5 2020-01-23 15 2 22 27 53 2 13 ## 6 2020-01-24 39 2 36 57 78 4 23 For the cured data, we use the same method to strom them in one dataframe. covid_cured_data_province &lt;- data.frame(date = date_range) for (i in 1:34) { name_idx &lt;- which(province_csvfile$V2==file_name[i]) cured &lt;- rep(0, 42) date_province &lt;- covid_data[[i]]$Date province_csvfile$V1[name_idx] for (j in 1:42){ idx &lt;- which(date_province==date_range[j]) if (length(idx)!=0){ if (is.na(covid_data[[i]]$Cured[idx])) { covid_data[[i]]$Cured[idx] = 0 } else { cured[j] = covid_data[[i]]$Cured[idx] } }else if(length(idx)==0 &amp;&amp; j!=1){ cured[j] = cured[j-1] } } covid_cured_data_province &lt;- transform(covid_cured_data_province, new_col = cured) covid_cured_data_province &lt;- plyr::rename(covid_cured_data_province, c(new_col=province_csvfile$V1[name_idx])) } We then calculate new cases through cumulative confirmed data. covid_added_byday &lt;- covid_data_province for (i in 42:2){ covid_added_byday[i,c(2:35)] &lt;- covid_added_byday[i,c(2:35)] - covid_added_byday[i-1,c(2:35)] } Now, these dataframes are messy, we need to tidy them before plotting. # confirmed covid_data_tidy &lt;- covid_data_province %&gt;% pivot_longer(cols = !date, names_to = &quot;province&quot;, values_to = &quot;confirmed_cases&quot;) # cured covid_cured_data_tidy &lt;- covid_cured_data_province %&gt;% pivot_longer(cols = !date, names_to = &quot;province&quot;, values_to = &quot;cured&quot;) # added covid_added_byday_tidy &lt;- covid_added_byday %&gt;% pivot_longer(cols = !date, names_to = &quot;province&quot;, values_to = &quot;added_confirmed_cases&quot;) covid_added_byday_tidy$province[covid_added_byday_tidy$province == &#39;Inner.Mongoria&#39;] &lt;- &#39;Inner Mongolia&#39; covid_added_byday_tidy$province[covid_added_byday_tidy$province == &#39;Hong.Kong&#39;] &lt;- &#39;Hong Kong&#39; # confirm cure confirmed_cured &lt;- inner_join(covid_data_tidy, covid_cured_data_tidy, by = c(&#39;date&#39;,&#39;province&#39;)) confirmed_cured_tidy &lt;- confirmed_cured %&gt;% pivot_longer(cols = !c(&#39;date&#39;,&#39;province&#39;), names_to = &quot;type&quot;, values_to = &quot;value&quot;) head(covid_added_byday_tidy) ## # A tibble: 6 x 3 ## date province added_confirmed_cases ## &lt;date&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2020-01-19 Anhui 0 ## 2 2020-01-19 Macau 0 ## 3 2020-01-19 Beijing 0 ## 4 2020-01-19 Chongqing 0 ## 5 2020-01-19 Guangdong 0 ## 6 2020-01-19 Gansu 0 "],["missing-values.html", "Chapter 4 Missing values", " Chapter 4 Missing values Fortunately, since most of our data sources are from official website and in standard format. We did not encounter problems in missing values. Most of our data remains complete and intact. "],["results.html", "Chapter 5 Results 5.1 Epidemic map 5.2 Epidemic situation in each province 5.3 Comparison with US pandemic", " Chapter 5 Results 5.1 Epidemic map We first want to have a big picture on the spread of Cvod-19 in China. We decided to get an animation on the total confirmed cases of Cvod-19 for each province such that we may find a geometric pattern on the pandemic. df &lt;- read.table(&quot;confirmed_final.csv&quot;, sep=&quot;,&quot;, header=TRUE) head(df) ## X date province province_n type value ## 1 1 2020/1/19 Anhui 安徽 confirmed_cases 0 ## 2 2 2020/1/19 Anhui 安徽 cured 0 ## 3 3 2020/1/19 Macao 澳门 confirmed_cases 0 ## 4 4 2020/1/19 Macao 澳门 cured 0 ## 5 5 2020/1/19 Beijing 北京 confirmed_cases 0 ## 6 6 2020/1/19 Beijing 北京 cured 0 In order to ingregate the data with the map of China, we use chinamap made by GuangchangYu (https://github.com/GuangchuangYu/chinamap). And we apply package magick to make an animation of the spread of the virus. #require(nCov2019) require(chinamap) require(ggplot2) library(magick) cn = get_map_china() cn$province = sub(&quot;省&quot;, &quot;&quot;, cn$province) cn$province = sub(&quot;自治区&quot;, &quot;&quot;, cn$province) cn$province = sub(&quot;市&quot;, &quot;&quot;, cn$province) cn$province = sub(&quot;特别行政区&quot;, &quot;&quot;, cn$province) cn$province = sub(&quot;维吾尔&quot;, &quot;&quot;, cn$province) cn$province = sub(&quot;壮族&quot;, &quot;&quot;, cn$province) cn$province = sub(&quot;回族&quot;, &quot;&quot;, cn$province) # china &lt;- df %&gt;% # dplyr::filter(date == &quot;2020/2/1&quot; &amp; type == &quot;confirmed_cases&quot;) # df1 = data.frame(name = china$province_n, # confirm = cut(china$value, c(1,10,100,500,1000,10000), # include.lowest = T, right=F)) # # cn2 = merge(cn, df1, by.x=&#39;province&#39;, by.y=&#39;name&#39;, all.x=TRUE) # cn2 = cn2[order(cn2$order),] # p&lt;-ggplot() + # geom_map(aes(long, lat, map_id=id, group=group, fill=confirm), map=cn2, data=cn2, colour=&#39;grey&#39;) + # coord_map() + # scale_fill_manual(values=cols, breaks=names(cols)) + # theme_minimal() + # xlab(NULL) + ylab(NULL) + # labs(title = &#39;2019nCov&#39;, # caption=paste(&quot;accessed date:&quot;, &quot;2020/2/1&quot;)) d &lt;- c(paste0(&quot;2020/1/&quot;, 20:31), paste0(&quot;2020/2/&quot;, 1:21)) img &lt;- image_graph(600, 400, res = 96) out &lt;- lapply(d, function(date1){ china &lt;- df %&gt;% dplyr::filter(date == date1 &amp; type == &quot;confirmed_cases&quot;) df1 = data.frame(name = china$province_n, confirm = cut(china$value, c(1,10,100,500,1000,10000,100000), include.lowest = T, right=F)) cn2 = merge(cn, df1, by.x=&#39;province&#39;, by.y=&#39;name&#39;, all.x=TRUE) cn2 = cn2[order(cn2$order),] cols = RColorBrewer::brewer.pal(6, &#39;Reds&#39;) names(cols) = levels(df$confirm) p &lt;- ggplot() + geom_map(aes(long, lat, map_id=id, group=group, fill=confirm), map=cn2, data=cn2, colour=&#39;grey&#39;) + coord_map() + scale_fill_manual(values=cols, breaks=names(cols)) + theme_minimal() + xlab(NULL) + ylab(NULL) + labs(title = &#39;2019nCov&#39;, caption=paste(&quot;accessed date:&quot;, date1)) print(p) }) dev.off() animation &lt;- image_animate(img, fps = 2) print(animation) image_write(animation, path = &quot;animation.gif&quot;, format = &quot;gif&quot;) 5.2 Epidemic situation in each province Regarding the cumulative confirmed cases data, we plot two line graphs. The difference between them is the arrangement of facets. The first graph is arranged according to geographic location. The second graph is arranged in descending order of the number of confirmed cases of each province. covid_data_tidy$province[covid_data_tidy$province == &#39;Inner.Mongoria&#39;] &lt;- &#39;Inner Mongolia&#39; covid_data_tidy$province[covid_data_tidy$province == &#39;Hong.Kong&#39;] &lt;- &#39;Hong Kong&#39; ggplot(covid_data_tidy, aes(x = date, y = confirmed_cases + 1)) + geom_line() + facet_geo(~ province, grid = &quot;china_prov_grid2&quot;, label = &#39;name&#39;) + ylab(&quot;Added confirmed cases&quot;) + scale_y_continuous(trans = log2_trans()) + ggtitle(&#39;Cumulative confirmed cases&#39;) province_order[province_order==&quot;Inner.Mongoria&quot;] &lt;- &#39;Inner Mongolia&#39; province_order[province_order==&quot;Hong.Kong&quot;] &lt;- &#39;Hong Kong&#39; covid_data_tidy$province &lt;- factor(covid_data_tidy$province, levels = province_order) ggplot(covid_data_tidy, aes(x = date, y = confirmed_cases+1)) + geom_line() + facet_wrap(~ province, ncol = 6) + ylab(&quot;Confirmed cases&quot;) + scale_y_continuous(trans = log2_trans()) + ggtitle(&#39;Cumulative confirmed cases&#39;) Since the number of confirmed cases in Hubei Province is much higher than that in other provinces, in order to show the cumulative confirmed cases distribution of each province better, the cumulative confirmed cases will be displayed after taking the logarithm. It can also be clearly found from the graph that the cumulative confirmed cases in Hubei Province is much higher than that in other provinces. After February 2020, the rate of increase in cases has gradually slowed down. At the end of February 2020, the cumulative confirmed curve of most provinces has flattened, and the epidemic has been effectively controlled. The following two graphs are plotted using new cases data every day. The facet arrangement of these two graphs is the same as graphs above. ggplot(covid_added_byday_tidy, aes(x = date, y = added_confirmed_cases+1)) + geom_line() + facet_geo(~ province, grid = &quot;china_prov_grid2&quot;, label = &#39;name&#39;) + ylab(&quot;New confirmed cases&quot;) + scale_y_continuous(trans = log2_trans()) + ggtitle(&#39;New confirmed cases&#39;) covid_added_byday_tidy$province &lt;- factor(covid_added_byday_tidy$province, levels = province_order) ggplot(covid_added_byday_tidy, aes(x = date, y = added_confirmed_cases+1)) + geom_line() + facet_wrap(~ province, ncol = 6) + ylab(&quot;New confirmed cases&quot;) + scale_y_continuous(trans = log2_trans()) + ggtitle(&#39;New confirmed cases&#39;) It can be seen from the new confirmed cases graph that the distribution of new cases every day shows a right deviation, with a rapid jump in the early stage and a slow decrease in the later stage. Except for Hubei Province, the number of new cases per day in other provinces is close to zero. Epidemic map is better than the line graph with geographic location. Because the shape of each province in China is irrgular, Epidemic map is the better choice to show geographic information. 5.3 Comparison with US pandemic First of all we want to input the data and transfer the data into dataframe in R. df_us_confirmed &lt;- readr::read_csv(&quot;/Users/gaopy3/Columbia_DS/EDAV/final_project/New folder/US_confirmed.csv&quot;) df_us_daily &lt;- readr::read_csv(&quot;/Users/gaopy3/Columbia_DS/EDAV/final_project/New folder/US_daily.csv&quot;) df_cn_confirmed &lt;- readr::read_csv(&quot;/Users/gaopy3/Columbia_DS/EDAV/final_project/New folder/China_confirmed.csv&quot;) df_cn_daily &lt;- readr::read_csv(&quot;/Users/gaopy3/Columbia_DS/EDAV/final_project/New folder/China_daily.csv&quot;) df_us_death &lt;- readr::read_csv(&quot;/Users/gaopy3/Columbia_DS/EDAV/final_project/New folder/US_death.csv&quot;) df_cn_death &lt;- readr::read_csv(&quot;/Users/gaopy3/Columbia_DS/EDAV/final_project/New folder/China_death.csv&quot;) df_us_confirmed &lt;- data.frame(date = df_us_confirmed$X1, confirmed = df_us_confirmed$confirmed, moving_average = df_us_confirmed$`moving average`) df_cn_confirmed &lt;- data.frame(date = df_cn_confirmed$X1, confirmed = df_cn_confirmed$confirmed, moving_average = df_cn_confirmed$`moving average`) df_us_daily &lt;- data.frame(date = df_us_daily$X1, confirmed = df_us_daily$daily, moving_average = df_us_daily$`moving average`) df_cn_daily &lt;- data.frame(date = df_cn_daily$X1, confirmed = df_cn_daily$daily, moving_average = df_cn_daily$`moving average`) df_us_death &lt;- data.frame(date = df_us_death$X1, death = df_us_death$death, moving_average = df_us_death$`moving average`) df_cn_death &lt;- data.frame(date = df_cn_death$X1, death = df_cn_death$death, moving_average = df_cn_death$`moving average`) Next, let’s look at the pattern of accumulative confirmed cases from US and China. ggplot(data=df_us_confirmed, aes(date)) + geom_line(aes(y = confirmed, colour = &quot;Confirmed Cases&quot;), size=1.3) + geom_line(aes(y = moving_average, colour = &quot;Moving average for 7 days&quot;), linetype = &quot;dashed&quot;)+ ggtitle(&quot;Confirmed Cases in US&quot;) ggplot(data=df_cn_confirmed, aes(date)) + geom_line(aes(y = confirmed, colour = &quot;Confirmed Cases&quot;), size=1.3) + geom_line(aes(y = moving_average, colour = &quot;Moving average for 7 days&quot;), linetype = &quot;dashed&quot;)+ ggtitle(&quot;Confirmed Cases in China&quot;) From these two graphs we can tell that the pandemic in China followed a rapid and explosive pattern which can be explained by the unexpected and sudden outbreak of the COVID-19 where back in December 2019, people in China were not aware of this virus. When the virus was first detected and identified, there had already been many people who were infected. While in the US graph, we can see a more smooth growth on the cumulative confirmed cases because the people in US was very much prepared and warned. However, due to lack of detection method on the virus at the beginning phase, we may notice a more rapid growth in later stage of this pandemic. Now, we shall observe the comparison when we put the confirmed cases together in one graph. df_total_confirmed &lt;- data.frame(date = df_us_confirmed$date, confirmed_us = df_us_confirmed$confirmed, confirmed_cn = df_cn_confirmed$confirmed) ggplot(data=df_total_confirmed[0:70,], aes(date)) + geom_line(aes(y = confirmed_us, colour = &quot;Confirmed Cases in US&quot;), size=1.3) + geom_line(aes(y = confirmed_cn, colour = &quot;Confirmed Cases in China&quot;), size=1.3) + ggtitle(&quot;Confirmed Cases in both Country&quot;) For this graph we only subset the first 70 days after the first confirmed cases was identified in China because the confirmed cases in US owns a much larger scale later. What makes the differences is that the Chinese government adopted a much more aggressive policy where staring from the lunar new year in 2020, people in China experienced an almost full lock down on traffic and quarantined at home for almost two months. The action is effective for preventing the situation from deteriorating, but also caused major loss on economy, especially in Huber province. For the next step, we shall look at the daily increases in both Country. ggplot(data=df_us_daily, aes(x=date, y=confirmed)) + geom_bar(stat=&#39;identity&#39;, color=&#39;navy&#39;)+ geom_line(aes(y=moving_average), color=&#39;red&#39; , linetype = &quot;dashed&quot;)+ ggtitle(&quot;Daily Confired Cases in US&quot;) ggplot(data=df_cn_daily, aes(x=date, y=confirmed)) + geom_bar(stat=&#39;identity&#39;, color=&#39;navy&#39;)+ geom_line(aes(y=moving_average), color=&#39;red&#39; , linetype = &quot;dashed&quot;)+ ggtitle(&quot;Daily Confired Cases in China&quot;) First, let us focus on the US graph where we can find a clear downward trend after around 100 days after the covid outbreak. This is because of the quarantine is effective around March where schools and company are shutting down and people first started to be aware of the virus. However the trend did not last long as people in US are losing patience and started questioning about the rightness of the quarantine. Major growth were disclosed when thanksgiving and Christmas arrived. Second, let us take a look a the China Graph where we can discover a very huge bar. The story behind this data is that due to the lack of detection methods of the virus, on Feb 13th, the Chinese government issued a special method where the virus an individual case can be identified through the X_ray of the patients’ lungs. This measure quickly release the tension on the covid-detection kit, but also identified huge amount of cases on one day. Similarly on the later stage, some individual cases were identified during the travel in summer and Chinese lunar new year. Last but not least, let us look at the death cases in both country. ggplot(data=df_us_death, aes(date)) + geom_line(aes(y = death, colour = &quot;Death Cases&quot;), size=1.3) + geom_line(aes(y = moving_average, colour = &quot;Moving average for 7 days&quot;), linetype = &quot;dashed&quot;)+ ggtitle(&quot;Confirmed Death in US&quot;) ggplot(data=df_cn_death, aes(date)) + geom_line(aes(y = death, colour = &quot;Death Cases&quot;), size=1.3) + geom_line(aes(y = moving_average, colour = &quot;Moving average for 7 days&quot;), linetype = &quot;dashed&quot;)+ ggtitle(&quot;Confirmed Death in China&quot;) From these two graph we can tell the graph in US roughly follows the same pattern as the cumulative confirmed cases. However we may find a sudden growth in the graph of China on Day 85. At that time the full lock down in Wuhan has been closed, but the story behind the data is that on Day 85, the Chinese government started to inspecting each and every death cases during the outbreak of Covid-19 to account for the proper number in death due to the virus since some cases may be missed or miscalculated during the locked down. "],["interactive-component.html", "Chapter 6 Interactive component", " Chapter 6 Interactive component This is an interactive Cleveland dot plot. It has a timeline which can be dragged. It can also be played in the form of animation. We use the plotly package in this part which is using plotly.js (Built on top of d3.js and stack.gl) to realize interactive functions. This plot is ordered by cumulative confirmed cases. From this graph, we can see both cumulative and cured cases and the gap ofthem. We are able to know about the severity of the epidemic in each province and which province needs more medical resources. "],["conclusion.html", "Chapter 7 Conclusion", " Chapter 7 Conclusion Our analysis is mainly based on the confirmed Covid-19 cases reported by local authorities. We approximate the spread of virus by the number of confirmed cases. However, the number of infected is not necessarily the same as that of the confirmed cases. Incubation period, limitations in Diagnosis, miss-reporting by local authorities, all of these factors will make the number of confirmed cases differs from the actual infected number. For future directions, we would like to take into account of the limitations of the confirmed data and apply the methodology of epidemiology (e.g. propagation coefficient) to build a more precise mathematical model for the analysis of the spread of the virus. Furthermore, we would like to explore on other relevant data sets such as the population mobility during the pandemic and investigate how those data affect the spread of the virus. "]]
